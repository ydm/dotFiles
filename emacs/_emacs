;; -*- coding: utf-8 -*-

;; +----------+
;; | Packages |
;; +----------+
(defvar *y:my-packages*
  '(ace-jump-mode
    coffee-mode
    etags-select
    flymake-jslint
    flymake-python-pyflakes
    key-chord
    less-css-mode
    ;; sea-before-storm-theme
    multiple-cursors
    pep8
    smex
    web-mode
    yaml-mode))

(defun y:install-package (name)
  "Install a package if it's not already installed."
  (package-initialize t)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p name)
    (package-install name)))

;; +--------------------------+
;; | Load themes and packages |
;; +--------------------------+
(defvar y:packages
  '(("~/dotFiles/emacs/pkg/tomorrow-theme" . tomorrow-day-theme)
    ("~/dotFiles/emacs/pkg/python-django.el" . python-django)
    ("~/dotFiles/emacs/pkg/errnav-minor-mode" . errnav-minor-mode)
    ("~/dotFiles/emacs/pkg/fuzzy-match" . fuzzy-match)
    ("~/dotFiles/emacs/pkg/unbound" . unbound)))

(mapcar (lambda (p)
          (add-to-list 'load-path (car p))
          (require (cdr p)))
        y:packages)

;; +--------------+
;; | Init scripts |
;; +--------------+
(add-to-list 'load-path "~/dotFiles/emacs/init/")
(add-to-list 'load-path "~/dotFiles/emacs/init/lib/")

(require 'init-advice)
(require 'init-compilation)
(require 'init-defuns)
(require 'init-dired)
(require 'init-flymake)
(require 'init-interactives)
(require 'init-keys)
(require 'init-modes)
(require 'init-rcirc)
(require 'init-shell)

;; +--------+
;; | Themes |
;; +--------+
(defun y:time-tuple-to-minutes (tup)
  (+ (* (car tup) 60)
     (cadr tup)))
(defun y:now-in-minutes ()
  (+ (* 60 (nth 2 (decode-time)))
     (nth 1 (decode-time))))

(defvar y:day-start '(8 0))
(defvar y:night-start '(20 0))
(defvar y:day-theme 'tomorrow-day)
(defvar y:night-theme 'tomorrow-night)
(defvar y:day-start-minutes (y:time-tuple-to-minutes y:day-start))
(defvar y:night-start-minutes (y:time-tuple-to-minutes y:night-start))

(defun y:day? ()
  (let ((now (y:now-in-minutes)))
    (and (>= now y:day-start-minutes)
         (<  now y:night-start-minutes))))

(defun y:load-theme-by-daytime ()
  (let* ((new-theme (if (y:day?) y:day-theme y:night-theme)))
    (unless (member new-theme custom-enabled-themes)
      (disable-theme (car custom-enabled-themes))
      (load-theme new-theme t))))

(run-at-time 1 300 #'y:load-theme-by-daytime)

;; +------+
;; | Misc |
;; +------+
(defalias 'yes-or-no-p 'y-or-n-p)       ; always y/n instead of yes/no

;; +----------------+
;; | Sensitive data |
;; +----------------+
(load "~/dotFiles/emacs/sensitive")

;; +-----------+
;; | Customize |
;; +-----------+
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Inconsolata LGC" :foundry "unknown" :slant normal :weight normal :height 107 :width normal)))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(abbrev-file-name "~/dotFiles/emacs/abbrev/abbrev_defs")
 '(backup-directory-alist (quote (("." . ".~"))))
 '(bs-attributes-list (quote (("" 1 1 left bs--get-marked-string) ("M" 1 1 left bs--get-modified-string) ("R" 2 2 left bs--get-readonly-string) ("Buffer" bs--get-name-length 10 left bs--get-name) ("" 1 1 left " ") ("Mode" 12 12 right bs--get-mode-name) ("" 2 2 left "  ") ("File" 12 12 left bs--get-file-name) ("" 2 2 left "  "))))
 '(bs-default-sort-name "by mode")
 '(calendar-week-start-day 1)
 '(coffee-mode-hook (quote (coffee-cos-mode subword-mode)))
 '(coffee-tab-width 2)
 '(column-number-mode t)
 '(default-input-method "bulgarian-alt-phonetic")
 '(delete-selection-mode t)
 '(dired-dwim-target t)
 '(dired-recursive-copies (quote always))
 '(fill-column 72)
 '(flymake-jslint-args (quote ("--browser")))
 '(gdb-many-windows t)
 '(global-hl-line-mode t)
 '(haskell-mode-hook (quote (turn-on-haskell-simple-indent)))
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(ispell-dictionary "english")
 '(line-move-visual nil)
 '(mouse-yank-at-point t)
 '(package-archives (quote (("gnu" . "http://elpa.gnu.org/packages/") ("marmalade" . "http://marmalade-repo.org/packages/"))))
 '(python-django-qmgmt-dumpdata-default-format "yaml")
 '(python-mode-hook (quote (flymake-python-pyflakes-load subword-mode (lambda nil (hs-minor-mode)))) t)
 '(python-shell-interpreter "python2")
 '(rcirc-default-nick "yordan")
 '(rcirc-server-alist (quote (("irc.freenode.net" :port 7000 :channels ("#4web" "#bgdev" "#emacs" "#gnu" "#python") :encryption tls))))
 '(save-place t nil (saveplace))
 '(save-place-file "~/.emacs.d/places")
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tags-revert-without-query t)
 '(tool-bar-position (quote right))
 '(tool-bar-style (quote image))
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify))
 '(visible-bell t)
 '(which-function-mode t)
 '(x-gtk-use-system-tooltips nil))

;; This is set last (after all requires, loads, etc) as this way this
;; hook will is executed first before any other hooks
(add-hook 'after-init-hook
          (lambda ()
            (message "Install packages: %s"
                     (mapcar #'y:install-package *y:my-packages*))))
