;; -*- coding: utf-8 -*-

(require 'cl)

;; +----------------+
;; | Local settings |
;; +----------------+
(defun y:check-and-load (name)
  (and (file-exists-p name)
       (load name)))

;; First execute the pre script.
(y:check-and-load "~/.emacs.d/init/pre.el")

;; The post script should be executed last.  Adding it first to the
;; after-init-hook will do exactly that.
(add-hook 'after-init-hook
	  (lambda () (y:check-and-load "~/.emacs.d/init/post.el")))

;; +---------------------------+
;; | Require packages manually |
;; +---------------------------+
;; ("~/dotFiles/emacs/pkg/fuzzy-match" . fuzzy-match)
;; ("~/dotFiles/emacs/pkg/errnav-minor-mode" . errnav-minor-mode)
(let ((paths '("~/dotFiles/emacs/pkg/tomorrow-theme"
	       "~/dotFiles/emacs/pkg/unbound"
	       "~/dotFiles/emacs/init/"
	       "~/dotFiles/emacs/init/lib/"))
      (requires '(tomorrow-night-theme
		  unbound
		  init-advice ;; loads init-interactives
		  init-dired
		  init-keys   ;; load init-interactives
		  init-modes
		  init-shell)))
  (cl-loop for path in paths do (add-to-list 'load-path path))
  (cl-loop for req in requires do (require req)))

;; +--------+
;; | Themes |
;; +--------+
(cl-loop for theme in custom-enabled-themes do (disable-theme theme))
(load-theme 'tomorrow-night t)

;; +------+
;; | Misc |
;; +------+
(defalias 'yes-or-no-p 'y-or-n-p)       ; always y/n instead of yes/no

;; +-----------+
;; | Customize |
;; +-----------+
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(abbrev-file-name "~/dotFiles/emacs/abbrev/abbrev_defs")
 '(ac-auto-start 0)
 '(backup-directory-alist (quote (("." . "~/.~"))))
 '(bs-attributes-list
   (quote
    (("" 1 1 left bs--get-marked-string)
     ("M" 1 1 left bs--get-modified-string)
     ("R" 2 2 left bs--get-readonly-string)
     ("Buffer" bs--get-name-length 10 left bs--get-name)
     ("" 1 1 left " ")
     ("Mode" 12 12 right bs--get-mode-name)
     ("" 2 2 left "  ")
     ("File" 12 12 left bs--get-file-name)
     ("" 2 2 left "  "))))
 '(bs-default-sort-name "by mode")
 '(calendar-week-start-day 1)
 '(column-number-mode t)
 '(default-input-method "bulgarian-alt-phonetic")
 '(delete-selection-mode t)
 '(dired-dwim-target t)
 '(dired-recursive-copies (quote always))
 '(gdb-many-windows t)
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode t)
 '(inhibit-startup-screen t)
 '(ispell-dictionary "english")
 '(line-move-visual nil)
 '(mouse-yank-at-point t)
 '(package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("melpa" . "http://melpa.org/packages/"))))
 '(save-place t nil (saveplace))
 '(save-place-file "~/.emacs.d/places")
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(tool-bar-position (quote right))
 '(tool-bar-style nil)
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify))
 '(visible-bell t)
 '(which-function-mode t)
 '(x-gtk-use-system-tooltips nil))

;; +----------+
;; | Packages |
;; +----------+
(defvar *y:my-packages*
  '(ace-jump-mode
    auto-complete
    key-chord
    smex))
(defun y:install-packages ()
  "Install packages if they're not already there."
  (package-initialize t)
  (unless package-archive-contents
    (package-refresh-contents))
  (cl-loop for p in *y:my-packages* do
	(if (package-installed-p p)
	    (message "Package is already installed: %s" p)
	  (message "Installing package: %s" p)
	  (package-install p))))
;; Adding this hook last means it will be executed first.
(add-hook 'after-init-hook #'y:install-packages)
