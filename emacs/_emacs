;; -*- coding: utf-8 -*-

(require 'cl)

;; +---------+
;; | Globals |
;; +---------+
(defvar *y:modules-dir* "~/dotFiles/emacs/modules")
(defvar *y:packages* '())
(defvar *y:modules-off* '(init-ac init-dsp init-gcc init-windows))

(defmacro y:install-packages (&rest ps)
  (cl-loop for p in ps do (add-to-list '*y:packages* p)))


;; +-----------------------+
;; | Pre/post init scripts |
;; +-----------------------+
(defun y:check-and-load (name)
  (when (file-exists-p name)
    (message "[Y] Executing %s" name)
    (load name)))

(y:check-and-load "~/.emacs.d/init/pre.el")
;; The post script should be executed last.  Being the first thing
;; added in the after-init-hook will do exactly that.
(add-hook 'after-init-hook
          (lambda () (y:check-and-load "~/.emacs.d/init/post.el")))


;; +------------------+
;; | General settings |
;; +------------------+
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(backup-directory-alist (quote (("." . "~/.~"))))
 '(bs-attributes-list
   (quote
    (("" 1 1 left bs--get-marked-string)
     ("M" 1 1 left bs--get-modified-string)
     ("R" 2 2 left bs--get-readonly-string)
     ("Buffer" bs--get-name-length 10 left bs--get-name)
     ("" 1 1 left " ")
     ("Mode" 12 12 right bs--get-mode-name)
     ("" 2 2 left "  ")
     ("File" 12 12 left bs--get-file-name)
     ("" 2 2 left "  "))))
 '(bs-default-sort-name "by mode")
 '(calendar-week-start-day 1)
 '(column-number-mode t)
 '(company-rtags-use-async nil)
 '(default-input-method "bulgarian-alt-phonetic")
 '(delete-selection-mode t)
 '(dired-dwim-target t)
 '(dired-recursive-copies (quote always))
 '(ediff-window-setup-function (quote ediff-setup-windows-plain))
 '(enable-local-variables :all)
 '(gdb-many-windows t)
 '(global-prettify-symbols-mode t)
 '(global-subword-mode t)
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(ispell-dictionary "english")
 '(line-move-visual nil)
 '(mouse-yank-at-point t)
 '(package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("melpa" . "http://melpa.org/packages/"))))
 '(save-place t nil (saveplace))
 '(save-place-file "~/.emacs.d/places")
 '(scroll-bar-mode nil)
 '(set-mark-command-repeat-pop t)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(tool-bar-position (quote right))
 '(tool-bar-style nil)
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify))
 '(which-function-mode t)
 '(x-gtk-use-system-tooltips nil))


;; +-------+
;; | Stuff |
;; +-------+
(defalias 'yes-or-no-p 'y-or-n-p)


;; +---------+
;; | Modules |
;; +---------+
(add-to-list 'load-path *y:modules-dir*)
(cl-loop for path in (directory-files *y:modules-dir* t "^[^\\.].*")
         for symbol = (intern (file-name-base path))
         when (not (member symbol *y:modules-off*)) do
         (if (file-directory-p path)
             (add-to-list 'load-path path))
         (message "[Y] Requiring %s" symbol)
         (require symbol))


;; +----------+
;; | Packages |
;; +----------+
(defun y:install-packages ()
  " Install all packages from *y:packages* if they're not already
installed."
  (package-initialize t)
  (unless package-archive-contents
    (package-refresh-contents))
  (cl-loop for p in *y:packages* do
           (if (package-installed-p p)
               (message "[Y] Already installed: %s" p)
             (message   "[Y] Installing:        %s" p)
             (package-install p))))

;; Adding this function last means it will be executed first.
(add-hook 'after-init-hook #'y:install-packages)
