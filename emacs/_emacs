;; -*- mode: emacs-lisp; -*-
;; -*- coding: utf-8; -*-

;; +----------+
;; | Packages |
;; +----------+
(defvar *y:my-packages*
  '(ace-jump-mode
    coffee-mode
    expand-region
    find-file-in-project
    flymake-easy
    flymake-python-pyflakes
    key-chord
    less-css-mode
    markdown-mode
    monokai-theme
    multiple-cursors
    pretty-mode-plus
    pymacs
    python-django
    smex))

(defun y:install-package (name)
  "Install a package if it's not already installed."
  (package-initialize t)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p name)
    (package-install name)))

;; +------------------------+
;; | Manually load packages |
;; +------------------------+
(add-to-list 'load-path "~/dotFiles/emacs/pkg/errnav-minor-mode/")
(autoload 'errnav-minor-mode "errnav-minor-mode")

(add-to-list 'load-path "~/dotFiles/emacs/pkg/yaml-mode/")
(autoload 'yaml-mode "yaml-mode")

(add-to-list 'load-path "~/dotFiles/emacs/pkg/unbound/")
(require 'unbound)

;; (add-to-list 'load-path "~/dotFiles/emacs/pkg/python.el/")
;; (require 'python)

;; +--------------+
;; | Init scripts |
;; +--------------+
(add-to-list 'load-path "~/dotFiles/emacs/init/")
(add-to-list 'load-path "~/dotFiles/emacs/init/lib/")

(require 'init-compilation)
(require 'init-defuns)
(require 'init-dired)
(require 'init-flymake)
(require 'init-interactives)
(require 'init-keys)
(require 'init-modes)
(require 'init-rcirc)
(require 'init-shell)

;; +--------+
;; | Themes |
;; +--------+
(require 'custom)
(add-to-list 'custom-theme-load-path
	     "~/dotFiles/emacs/themes/emacs-color-theme-solarized/")

;; tomorrow-theme also requires some files to be find-able trough the
;; load-path
(add-to-list 'custom-theme-load-path
             "~/dotFiles/emacs/themes/tomorrow-theme/GNU Emacs")
(add-to-list 'load-path
             "~/dotFiles/emacs/themes/tomorrow-theme/GNU Emacs")

(defvar y:day-start '(8 0))
(defvar y:night-start '(20 0))
(defvar y:day-theme 'tommorow-day)
(defvar y:night-theme 'tomorrow-night)

(defun y:time-tuple-to-minutes (tup) (+ (* (car tup) 60) (cadr tup)))
(defun y:now-in-minutes () (+ (* 60 (nth 2 (decode-time)))
                              (nth 1 (decode-time))))

(defvar y:day-start-minutes (y:time-tuple-to-minutes y:day-start))
(defvar y:night-start-minutes (y:time-tuple-to-minutes y:night-start))

(defun y:day? ()
  (let ((now (y:now-in-minutes)))
    (and (>= now y:day-start-minutes)
         (<  now y:night-start-minutes))))

(defun y:load-theme-by-daytime ()
  (let* ((current-theme (car custom-enabled-themes))
         (new-theme (if (y:day?) y:day-theme y:night-theme)))
    (unless (eq current-theme new-theme)
      (disable-theme current-theme)
      (load-theme new-theme t))))

(run-at-time 0 300 #'y:load-theme-by-daytime)

;; +------+
;; | Misc |
;; +------+
(defalias 'yes-or-no-p 'y-or-n-p)       ; always y/n instead of yes/no

(add-hook 'before-save-hook #'y:del-trail-ws-before-save-hook)
(add-hook 'find-file-hook #'y:mkdir-ff-hook)

;; Clean up the buffer list when displaying the BS window
(defadvice bs-show (before y:kill-system-buffers-before-bs-show activate)
  (y:kill-system-buffers))

;; Pep8 requires tramp >.<
(defadvice pep8 (before y:load-tramp-before-pep8 activate)
  (require 'tramp))

;; Apply ansi color to the shell output buffer
(defadvice display-message-or-buffer
  (before y:ansi-color-apply-on-shell-output activate)
  (let ((buffer (ad-get-arg 0)))
    (and (bufferp buffer)
         (string= (buffer-name buffer) "*Shell Command Output*")
         (y:ansi-color-apply-on-buffer buffer))))

(defadvice ido-find-file
  (after y:sudo-ff-if-not-writable-or-diff-owner activate)
  "Reopen file as root if it's not writable or file's owner is
different.  Idea:
http://emacsredux.com/blog/2013/04/21/edit-files-as-root/"
  (unless (or (file-writable-p (buffer-file-name))
              (y:same-owner-p (buffer-file-name)))
    (find-alternate-file
     (concat "/sudo:root@localhost:" buffer-file-name))))

;; +---------------------+
;; | Run Emacs as server |
;; +---------------------+
;; https://github.com/magnars/.emacs.d/blob/master/init.el
(require 'server)
(unless (server-running-p)
  (server-start))

;; +------+
;; | Helm |
;; +------+
(add-to-list 'load-path "~/dotFiles/emacs/pkg/helm/")
(require 'helm-config)
(global-set-key (kbd "C-c h") 'helm-mini)

;; +----------------+
;; | Sensitive data |
;; +----------------+
(load "~/dotFiles/emacs/sensitive")

;; +-----------+
;; | Customize |
;; +-----------+
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Inconsolata LGC" :foundry "unknown" :slant normal :weight normal :height 113 :width normal)))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(abbrev-file-name "~/dotFiles/emacs/abbrev/abbrev_defs")
 '(backup-directory-alist (quote (("." . ".~"))))
 '(bs-attributes-list
   (quote
    (("" 1 1 left bs--get-marked-string)
     ("M" 1 1 left bs--get-modified-string)
     ("R" 2 2 left bs--get-readonly-string)
     ("Buffer" bs--get-name-length 10 left bs--get-name)
     ("" 1 1 left " ")
     ("Mode" 12 12 right bs--get-mode-name)
     ("" 2 2 left "  "))))
 '(bs-default-sort-name "by mode")
 '(calendar-week-start-day 1)
 '(coffee-mode-hook (quote (subword-mode)))
 '(coffee-tab-width 2)
 '(column-number-mode t)
 '(default-input-method "bulgarian-alt-phonetic")
 '(delete-selection-mode t)
 '(dired-dwim-target t)
 '(dired-recursive-copies (quote always))
 '(electric-pair-mode t)
 '(fill-column 79)
 '(gdb-many-windows t)
 '(global-hl-line-mode t)
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(ispell-dictionary "english")
 '(less-css-compile-at-save t)
 '(line-move-visual nil)
 '(mouse-yank-at-point t)
 '(package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("marmalade" . "http://marmalade-repo.org/packages/"))))
 '(python-django-qmgmt-dumpdata-default-format "yaml")
 '(python-mode-hook
   (quote
    (flymake-python-pyflakes-load subword-mode hs-minor-mode)) t)
 '(python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\\n")
 '(python-shell-completion-setup-code "from IPython.core.completerlib import module_completion")
 '(python-shell-completion-string-code
   "';'.join(get_ipython().Completer.all_completions('''%s'''))\\n
")
 '(python-shell-interpreter "ipython")
 '(python-shell-interpreter-args "--profile=dev")
 '(python-shell-prompt-block-regexp "In \\\\[[0-9]+\\\\]: ")
 '(python-shell-prompt-output-regexp "Out\\\\[[0-9]+\\\\]: ")
 '(rcirc-default-nick "yordan")
 '(rcirc-server-alist
   (quote
    (("irc.freenode.net" :port 7000 :channels
      ("#4web" "#bgdev" "#emacs" "#gnu" "#python")
      :encryption tls))))
 '(save-place t nil (saveplace))
 '(save-place-file "~/.emacs.d/places")
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tags-revert-without-query t)
 '(tool-bar-position (quote right))
 '(tool-bar-style (quote image))
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify))
 '(visible-bell t)
 '(which-function-mode t)
 '(x-gtk-use-system-tooltips nil))

;; This should be set last as this way it'll be executed first before any other
;; hooked functions
(add-hook 'after-init-hook
          (lambda ()
            (message "Install packages: %s"
                     (mapcar #'y:install-package *y:my-packages*))))
