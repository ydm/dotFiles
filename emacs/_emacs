;; -*- mode: emacs-lisp; -*-
;; -*- coding: utf-8; -*-

;; +----------+
;; | Packages |
;; +----------+
(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize t)
(unless package-archive-contents
  (package-refresh-contents))

(defvar *my-packages*
  '(ace-jump-mode
    coffee-mode
    expand-region
    less-css-mode
    multiple-cursors
    smex))

(defun y/install-package (name)
  "Install a package if it's not already installed."
  (unless (package-installed-p name)
    (package-install name)))
(mapcar 'y/install-package *my-packages*)

;; +------------------------+
;; | Manually load packages |
;; +------------------------+
(add-to-list 'load-path "~/dotFiles/emacs/pkg/errnav-minor-mode/")
(autoload 'errnav-minor-mode "errnav-minor-mode")

(add-to-list 'load-path "~/dotFiles/emacs/pkg/yaml-mode/")
(autoload 'yaml-mode "yaml-mode")

(add-to-list 'load-path "~/dotFiles/emacs/pkg/unbound/")
(require 'unbound)

;; +--------------+
;; | Init scripts |
;; +--------------+
(add-to-list 'load-path "~/dotFiles/emacs/init/")
(add-to-list 'load-path "~/dotFiles/emacs/init/lib/")

(require 'init-compilation)
(require 'init-dired)
(require 'init-flymake)
(require 'init-interactives)
(require 'init-keys)
(require 'init-modes)
(require 'init-shell)

;; +--------+
;; | Themes |
;; +--------+
(require 'custom)
(add-to-list 'custom-theme-load-path
	     "~/dotFiles/emacs/themes/emacs-color-theme-solarized/")
(add-to-list 'custom-theme-load-path
             "~/dotFiles/emacs/themes/tomorrow-theme/GNU Emacs")

;; +------+
;; | Misc |
;; +------+
(defalias 'yes-or-no-p 'y-or-n-p)       ; always y/n instead of yes/no

;; Apply ansi color to the shell output buffer
(defadvice display-message-or-buffer (before apply-ansi-color activate)
  (let ((buffer (ad-get-arg 0)))
    (and (bufferp buffer)
         (string= (buffer-name buffer) "*Shell Command Output*")
         (apply-ansi-color-current-buffer buffer))))

;; Clean up the buffer list when displaying the BS selection window
(defadvice bs-show (before kill-system-buffers-before-bs-show)
  (kill-system-buffers))

;; +----------------+
;; | Sensitive data |
;; +----------------+
;; (load (y/file *emacs-dir* "sensitive"))

;; +-----------+
;; | Customize |
;; +-----------+
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Inconsolata LGC" :foundry "unknown" :slant normal :weight normal :height 113 :width normal)))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(abbrev-file-name "~/dotFiles/emacs/abbrev/abbrev_defs")
 '(background-mode light)
 '(backup-directory-alist (quote (("." . ".~"))))
 '(bs-attributes-list (quote (("" 1 1 left bs--get-marked-string) ("M" 1 1 left bs--get-modified-string) ("R" 2 2 left bs--get-readonly-string) ("Buffer" bs--get-name-length 10 left bs--get-name) ("" 1 1 left " ") ("Mode" 12 12 right bs--get-mode-name) ("" 2 2 left "  "))))
 '(bs-default-sort-name "by mode")
 '(calendar-week-start-day 1)
 '(coffee-mode-hook (quote (subword-mode)))
 '(coffee-tab-width 2)
 '(column-number-mode t)
 '(custom-enabled-themes (quote (tomorrow-night-bright)))
 '(custom-safe-themes t)
 '(default-input-method "bulgarian-alt-phonetic")
 '(dired-dwim-target t)
 '(dired-recursive-copies (quote always))
 '(display-time-mode t)
 '(electric-pair-mode t)
 '(global-hl-line-mode t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(ispell-dictionary "english")
 '(less-css-compile-at-save t)
 '(line-move-visual nil)
 '(python-mode-hook (quote (subword-mode)) t)
 '(rcirc-default-nick "yordan")
 '(rcirc-server-alist (quote (("irc.freenode.net" :port 7000 :channels ("#4web" "#bgdev" "#emacs" "#gnu") :encryption tls))))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tool-bar-position (quote right))
 '(tool-bar-style (quote image))
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify))
 '(which-function-mode t)
 '(x-gtk-use-system-tooltips nil))
